package foms;

import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamPanel;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.google.zxing.*;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.HybridBinarizer;
import java.sql.*;
import dao.ConnectionProvider;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.HeadlessException;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.geom.Ellipse2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.text.SimpleDateFormat;
import java.time.Duration;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadFactory;
import javax.swing.BorderFactory;
import javax.swing.Timer;
import utility.DBUtility;
import java.util.*;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import org.apache.log4j.Logger;

public class MarkAttendance extends javax.swing.JFrame implements Runnable, ThreadFactory {

    private static final Logger logger = Logger.getLogger(MarkAttendance.class);
    private WebcamPanel panel = null;
    private Webcam webcam = null;
    private ExecutorService executor = null;
    private volatile boolean running = true;
    private BufferedImage imagee = null;
    Map<String, String> resultMap = new HashMap<String, String>();

    public MarkAttendance() {
        initComponents();
        DBUtility.SetImage(this, "/utility/images/A.jpg", 1024, 600);
        this.getRootPane().setBorder(BorderFactory.createMatteBorder(4, 4, 4, 4, Color.YELLOW));

        initWebcam();
        Timer timer = new Timer(1, e -> updateTime());
        timer.start();
    }

    private void updateTime() {
        SimpleDateFormat simpledatformat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
        lbltime.setText(simpledatformat.format(new Date()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnExit = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        webcamview = new javax.swing.JPanel();
        lblimage = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        lbltime = new javax.swing.JLabel();
        lblname = new javax.swing.JLabel();
        lblchackincheckout = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1024, 600));
        setUndecorated(true);

        btnExit.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnExit.setText("X");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 22)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Mark Attandence");

        webcamview.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Date");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Time");

        lbltime.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        lbltime.setForeground(new java.awt.Color(255, 255, 255));
        lbltime.setText("Time");

        lblname.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        lblchackincheckout.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(webcamview, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(86, 86, 86)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lbltime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(161, 161, 161))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(81, 81, 81)
                                .addComponent(jLabel4)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(81, 81, 81)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblname, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblimage, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblchackincheckout, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(418, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(336, 336, 336)
                .addComponent(btnExit)
                .addGap(51, 51, 51))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExit))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(lbltime)
                        .addGap(26, 26, 26)
                        .addComponent(lblimage, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblname, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblchackincheckout, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(webcamview, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(72, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        running = false;
        stopWebcam();
        if (executor != null && !executor.isShutdown()) {
            executor.shutdown();
        }
        this.dispose();
    }//GEN-LAST:event_btnExitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MarkAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MarkAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MarkAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MarkAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MarkAttendance().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel lblchackincheckout;
    private javax.swing.JLabel lblimage;
    private javax.swing.JLabel lblname;
    private javax.swing.JLabel lbltime;
    private javax.swing.JPanel webcamview;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        while (running) {
            try {
                Thread.sleep(1000);

                if (webcam == null || !webcam.isOpen()) {
                    continue;
                }

                BufferedImage image = webcam.getImage();
                if (image == null) {
                    continue;
                }

                LuminanceSource source = new BufferedImageLuminanceSource(image);
                BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));

                try {
                    Result result = new MultiFormatReader().decode(bitmap);
                    if (result != null) {
                        processQRResult(result);
                    }
                } catch (NotFoundException ex) {
                    // Expected exception when no QR code is found
                } catch (Exception ex) {
                    logger.error("Error processing QR code", ex);
                }
            } catch (InterruptedException ex) {
                Thread.currentThread().interrupt();
                break;
            }
        }
    }

    private void processQRResult(Result result) {
        String jsonString = result.getText();
        Gson gson = new Gson();
        java.lang.reflect.Type type = new TypeToken<Map<String, String>>() {
        }.getType();
        resultMap = gson.fromJson(jsonString, type);

        String finalpath = DBUtility.getPath("images\\" + resultMap.get("email") + ".jpg");
        CircularImageFrame(finalpath);
    }

    @Override
    public Thread newThread(Runnable r) {
        Thread t = new Thread(r, "My Thread");
        t.setDaemon(true);
        return t;
    }

    private void stopWebcam() {
        if (webcam != null) {
            webcam.close();
        }
        if (panel != null) {
            panel.stop();
        }
    }

    private void initWebcam() {
        try {
            webcam = Webcam.getDefault();
            if (webcam != null) {
                Dimension[] resolutions = webcam.getViewSizes();
                Dimension maxResolution = resolutions[resolutions.length - 1];
                webcam.setViewSize(maxResolution);

                // Add delay for webcam initialization
                webcam.open(true); 

                panel = new WebcamPanel(webcam);
                panel.setPreferredSize(maxResolution);
                panel.setFPSDisplayed(true);
                webcamview.add(panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 495, 386));

                executor = Executors.newSingleThreadExecutor(this);
                executor.execute(this);
            } else {
                JOptionPane.showMessageDialog(this, "No webcam detected!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
            logger.error("Webcam initialization error", e);
            JOptionPane.showMessageDialog(this, "Webcam initialization failed: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void CircularImageFrame(String imagepath) {
        try {
            Connection con = ConnectionProvider.getcon();
            PreparedStatement st = con.prepareStatement("SELECT * FROM userdetails WHERE email=?");
            st.setString(1, resultMap.get("email"));
            ResultSet rs = st.executeQuery();

            if (!rs.next()) {
                showPopUpForCertainDuration("User is not registered or Deleted", "Invalid QR", JOptionPane.ERROR_MESSAGE);
                return;
            }

            imagee = null;
            File imageFile = new File(imagepath);
            if (imageFile.exists()) {
                try {
                    imagee = ImageIO.read(imageFile);
                    imagee = createCircularImage(imagee);
                    lblimage.setIcon(new ImageIcon(imagee));
                } catch (Exception ex) {
                    logger.error("Error loading image", ex);
                    createDefaultImage();
                }
            } else {
                createDefaultImage();
            }

            lblimage.setHorizontalAlignment(JLabel.CENTER);
            lblname.setText(resultMap.get("name"));
            checkInCheckOut();

        } catch (Exception ex) {
            logger.error("Error in CircularImageFrame", ex);
        }
    }

    private void createDefaultImage() {
        BufferedImage imagees = new BufferedImage(300, 300, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2d = imagees.createGraphics();
        g2d.setColor(Color.BLACK);
        g2d.fillOval(25, 25, 250, 250);
        g2d.setFont(new Font("Serif", Font.BOLD, 250));
        g2d.setColor(Color.WHITE);
        g2d.drawString(String.valueOf(resultMap.get("name").charAt(0)).toUpperCase(), 75, 225);
        g2d.dispose();
        lblimage.setIcon(new ImageIcon(imagees));
    }

     private void showPopUpForCertainDuration(String popUpMessage, String popUpHeader, Integer iconId) {
        final JOptionPane optionPane = new JOptionPane(popUpMessage, iconId);
        final JDialog dialog = optionPane.createDialog(popUpHeader);
        
        Timer timer = new Timer(5000, e -> {
            dialog.dispose();
            clearUserDetails();
        });
        timer.setRepeats(false);
        timer.start();
        
        dialog.setVisible(true);
    }

   private void clearUserDetails() {
        lblchackincheckout.setText("");
        lblchackincheckout.setBackground(null);
        lblchackincheckout.setForeground(null);
        lblchackincheckout.setOpaque(false);
        lblname.setText("");
        lblimage.setIcon(null);
    }

    private BufferedImage createCircularImage(BufferedImage image) {
        int diameter = 250;
        BufferedImage resizedImage = new BufferedImage(diameter, diameter, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2 = resizedImage.createGraphics();
        g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
        g2.drawImage(image, 0, 0, diameter, diameter, null);
        g2.dispose();
        
        BufferedImage circularImage = new BufferedImage(diameter, diameter, BufferedImage.TYPE_INT_ARGB);
        g2 = circularImage.createGraphics();
        Ellipse2D.Double circle = new Ellipse2D.Double(0, 0, diameter, diameter);
        g2.setClip(circle);
        g2.drawImage(resizedImage, 0, 0, null);
        g2.dispose();
        
        return circularImage;
    }

   private boolean checkInCheckOut() {
        try {
            Connection con = ConnectionProvider.getcon();
            LocalDate currentDate = LocalDate.now();
            DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
            LocalDateTime currentDateTime = LocalDateTime.now();
            DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");

            // Fixed SQL query syntax
            PreparedStatement st = con.prepareStatement(
                "SELECT * FROM userattendance WHERE date=? AND user_id=?");
            st.setString(1, currentDate.format(dateFormatter));
            st.setInt(2, Integer.parseInt(resultMap.get("id")));
            ResultSet rs = st.executeQuery();

            String popUpHeader;
            String popUpMessage;
            Color color;

            if (rs.next()) {
                // Check-out logic
                String checkOutDateTime = rs.getString("checkOut");
                if (checkOutDateTime != null) {
                    showPopUpForCertainDuration("Already Checked Out For the Day", "Invalid CheckOut", JOptionPane.ERROR_MESSAGE);
                    return false;
                }

                String checkInDateTime = rs.getString("checkIn");
                LocalDateTime checkInLocalDateTime = LocalDateTime.parse(checkInDateTime, dateTimeFormatter);
                Duration duration = Duration.between(checkInLocalDateTime, currentDateTime);
                long hours = duration.toHours();
                long minutes = duration.minusHours(hours).toMinutes();
                long seconds = duration.minusHours(hours).minusMinutes(minutes).toSeconds();

                if (hours == 0 && minutes < 5) {
                    long remainingMinutes = 4 - minutes;
                    long remainingSeconds = 60 - seconds;
                    popUpMessage = String.format(
                        "Your Work Duration is less than 5 minutes\nYou can check out after %d minutes %d seconds", 
                        remainingMinutes, remainingSeconds);
                    showPopUpForCertainDuration(popUpMessage, "Duration Warning", JOptionPane.WARNING_MESSAGE);
                    return false;
                }

                // Update check-out
                PreparedStatement ps = con.prepareStatement(
                    "UPDATE userattendance SET checkOut=?, workDuration=? WHERE date=? AND user_id=?");
                ps.setString(1, currentDateTime.format(dateTimeFormatter));
                ps.setString(2, hours + " Hours and " + minutes + " minutes");
                ps.setString(3, currentDate.format(dateFormatter));
                ps.setInt(4, Integer.parseInt(resultMap.get("id")));
                ps.executeUpdate();

                popUpHeader = "CheckOut";
                popUpMessage = "Checked Out at " + currentDateTime.format(dateTimeFormatter) + 
                    "\nWork duration: " + hours + " Hours and " + minutes + " Minutes";
                color = Color.RED;
            } else {
                // Check-in logic
                PreparedStatement ps = con.prepareStatement(
                    "INSERT INTO userattendance (user_id, date, checkIn) VALUES (?, ?, ?)");
                ps.setInt(1, Integer.parseInt(resultMap.get("id")));
                ps.setString(2, currentDate.format(dateFormatter));
                ps.setString(3, currentDateTime.format(dateTimeFormatter));
                ps.executeUpdate();

                popUpHeader = "CheckIn";
                popUpMessage = "Checked In at " + currentDateTime.format(dateTimeFormatter);
                color = Color.GREEN;
            }

            lblchackincheckout.setHorizontalAlignment(JLabel.CENTER);
            lblchackincheckout.setText(popUpHeader);
            lblchackincheckout.setForeground(color);
            lblchackincheckout.setBackground(Color.DARK_GRAY);
            lblchackincheckout.setOpaque(true);
            showPopUpForCertainDuration(popUpMessage, popUpHeader, JOptionPane.INFORMATION_MESSAGE);
            return true;

        } catch (Exception ex) {
            logger.error("Error in checkInCheckOut", ex);
            return false;
        }
    }

     @Override
    public void paint(Graphics g) {
        super.paint(g);
        if (imagee != null) {
            g.drawImage(imagee, 0, 0, null);
        }
    }
}
